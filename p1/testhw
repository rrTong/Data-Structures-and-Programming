#! /bin/bash

echo $1
testerDirectory="/home/ssdavis/60/p1/Testing"

if [ $# -ne 1 ]; then
  echo "usage testhw: testhw source_directory" 1>&2
  exit
fi

if [[ $1 =~ Testing ]]; then # Use from this directory is not allowed
  echo "You may not use Testing as your own source directory!"  1>&2
  exit
fi

cd $1
echo -n "Scores from p1 for " > results.txt

if [ -e authors.csv ]; then
  dos2unix -q authors.csv
  awk -F, '{printf"%s,%s ", $2, $3}' authors.csv >> results.txt
  awk -F, '{printf"%s,%s\n", $2, $3}' authors.csv > names.txt
  echo -e "\n\nNote that the format for authors.csv is: e-mail<comma>last name<comma>first name" >> results.txt
  echo "For example: ssdavis@ucdavis.edu,Davis,Sean"  >> results.txt
  awk -F, {'printf"%s ", $1'} authors.csv > addresses
else
  echo  "You need to create an authors.csv file!!!! No one will receive credit for this assignment"  >> results.txt
  echo "$1@ucdavis.edu" > addresses
  finger ${PWD##*/} | awk 'NR == 1 {printf"%s,%s", $NF, $4}' > names.txt
fi

echo -n "Addresses used: " >> results.txt
cat addresses >> results.txt
echo -e "\n" >> results.txt
TTScore=5
BalanceScore=0
BagsScore=0

rm a.out &> /dev/null
cp $testerDirectory/*.cpp $testerDirectory/*.h $testerDirectory/*.dat $testerDirectory/*.txt .

if [ ! -e timetest.cpp ]; then
  echo "timetest.cpp does not exist."  >> results.txt
  TTScore=0
else
  g++ timetest.cpp &> /dev/null

  if [[ ! -e a.out ]]; then # a.out not found
    TTScore=0
    echo "timetest.cpp does not compile!"  >> results.txt 
  else
    fileNum=1
    echo timetest.cpp operation testing:  >> results.txt
    echo timetest.cpp:
    while [[ $fileNum -lt 7 ]]; do
      echo $fileNum  1>&2
      echo -n "$fileNum: for " >> results.txt
      cat $testerDirectory/input$fileNum.txt >> results.txt
      rm -f out$fileNum.txt  
      (a.out < $testerDirectory/input$fileNum.txt | awk '/CPU/ {print int($6 * 1000) }' | head -1 > out$fileNum.txt )&
      sleep 1
      pkill a.out >& /dev/null
      testTime=0
    
      if [ -e out$fileNum.txt ]; then
        testTime=`cat out$fileNum.txt`
      fi

      if [[ $testTime -gt 7 && $testTime -lt 1000 ]]; then
        echo OK >> results.txt
      else
        echo "Not OK, CPU time outside acceptable range" >> results.txt
        (( TTScore-- ))
      fi

      (( fileNum++ ))
    done  # while less than 7
  fi # if timetest a.out
fi # if timetest.cpp exists

if [ $TTScore -lt 0 ]; then
  TTScore=0
fi

queensScore=0

echo "queens.cpp:" >>results.txt
if [ ! -e queens.cpp ]; then
  echo "queens.cpp not found." >> results.txt
else  # queens.cpp found
  grep "#include *<" queens.cpp | grep -v "iostream" > temp
  grep "[2-6]" queens.cpp >> temp
  if [ -s temp ]; then
    echo "2-6 or #include of system header file other than iostream found in queens.cpp so zero."  >> results.txt
  else # No violation of specs
    g++ -o queens.out queens.cpp
    if [ ! -e queens.out ]; then # queens.out not found
      echo "queens.cpp does not compile!"  >> results.txt
    else #queens.out create  
      queens.out > temp
      lineCount=$( cat temp | wc -l )
      
      if [ $lineCount -eq 0 ]; then
        echo "No output from queens.out, so zero." >> results.txt
      else
        # echo $1 >> ../results
        # cat names.txt >> ../results
        # cat queens.cpp >> ../results
        # echo Done with $1 >> ../results
        # echo -e "\n ################################################ \n\n" >> ../results

        if [ $lineCount -eq 1 ]; then
          solution=$( cat temp)
          grep $solution QueensKey.txt > temp2
        
          if [ -s temp2 ]; then
            echo "One queens solution found, so 20 points." >> results.txt
            queensScore=20
          else
            echo "Single queens solution is invalid, so zero points." >> results.txt
            queensScore=0
            lineCount=0
          fi # if single queens solution found
        else # multiple line solution
          duplicates=$( sort temp | uniq -d | wc -l )
        
          if [ $duplicates -gt 0 ]; then
            echo "Duplicated solutions in queens, so zero points." >> results.txt
          else # No duplicated lines
            linesCount=0

            while read line; do 
              foundCount=$( grep $line QueensKey.txt | wc -l )

              if [ $foundCount -eq 1 ]; then
                (( linesCount += 1 ))
              else
                echo "Multiple queens solution contain an invalid solution, so zero points." >> results.txt
                linesCount=0
                queensScore=0
                break
              fi #if found the solution in QueensKey.txt
            done < temp # reads each line of their solution.
            
            if [ $linesCount -eq 92 ]; then
              echo "92 unique solutions so 25 points."  >> results.txt
              queensScore=25
            elif [ $linesCount -gt 0 ]; then
              echo "Less than 92 unique solutions so 20 points."  >> results.txt
              queensScore=20
            fi # if correct number of solutions.
          fi # if duplicated lines
        fi # if lineCount == 1
      fi # if lineCount == 0
    fi # if queens.out found
  fi # if violation found
fi #if queens.cpp found


echo  "Timetest score: $TTScore  Queens score: $queensScore"  >> results.txt
(( finalScore =  queensScore + TTScore ))
echo "Total: $finalScore out of 25.">> results.txt
echo "Note that I will eyeball your queens.cpp code to ensure you used a backtracking algorithm."  >> results.txt
echo "If you have not used such an algorithm, you will receive a zero for queens, and have no " >> results.txt
echo "opportunity to edit your queens.cpp." >> results.txt

#  mailx -s "ECS 60 P1 Test Results" `cat addresses` < results.txt

# awk 'NR == 1 {printf"%s,", $0}' names.txt >> ../results.csv
#echo "${1%%/},$finalScore,$TTScore,$queensScore" >> ../results.csv
#authorCount=$(grep "@" authors.txt | wc -l)

#if [ $authorCount -gt 1 ]; then
#  awk 'NR == 2 {printf"%s,", $0}' names.txt >> ../results.csv
#  echo "${1%%/},$finalScore,$TTScore,$queensScore" >> ../results.csv
#fi
